{
  parserClass="com.feakin.intellij.parser.FeakinParser"
  parserUtilClass="com.intellij.lang.parser.GeneratedParserUtilBase"
  psiImplUtilClass="com.feakin.intellij.parser.FeakinPsiImplUtil"

  implements="com.feakin.intellij.psi.FeakinPsiCompositeElement"
  extends="com.feakin.intellij.psi.impl.FeakinPsiCompositeElementImpl"

  psiClassPrefix="Feakin"
  psiImplClassSuffix="Impl"
  psiPackage="com.feakin.intellij.psi"
  psiImplPackage="com.feakin.intellij.psi.impl"

  elementTypeHolderClass="com.feakin.intellij.lexer.FeakinElementTypes"
  elementTypeClass="com.feakin.intellij.psi.impl.FeakinElementType"

  tokenTypeClass="com.feakin.intellij.lexer.FeakinTokenType"

  tokenTypeClass="com.feakin.intellij.lexer.FeakinTokenType"
  tokens = [
      COMMENT               = 'regexp://[^\r\n]*'
      BLOCK_COMMENT         = 'regexp:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]'

      IDENTIFIER            = 'regexp:[_a-zA-Z][_a-zA-Z0-9]*'
      STRING_LITERAL        = "regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"

      COMMA                 = ','
      COLON                 = ":"
      DOUBLE_COLON          = "::"
      SEMICOLON             = ";"
      LBRACE                = "{"
      RBRACE                = "}"
      EQUAL                 = "="
      QUOTA                 = "'"
      LPAREN                = '('
      RPAREN                = ')'

      RARROW                = "->"
      LARROW                = "<-"
      DARROW                = "<->"
      CONNECTION            = "--"

      CONTEXT_MAP_KEYWORD   = 'ContextMap'
      CONTEXT_KEYWORD       = 'Context'
      AGGREGATION_KEYWORD   = 'Aggregate'
      ENTITY_KEYWORD        = 'Entity'
      VALUE_OBJECT_KEYWORD  = 'ValueObject'
      STRUCT_KEYWORD        = 'Struct'
  ]
}

compilationUnit ::= declaration*

declaration ::= contextMapDeclaration
               | contextDeclaration
               | aggregateDeclaration
               | entityDeclaration
               | valueObjectDeclaration

contextMapDeclaration ::= CONTEXT_MAP_KEYWORD contextMapName LBRACE contextMapBody RBRACE
{
  mixin="com.feakin.intellij.psi.impl.FeakinNamedElementImpl"
  implements="com.feakin.intellij.psi.FeakinNamedElement"
  methods=[getName getPresentation]
}

contextMapBody ::= (contextNodeDecl | contextNodeRel)*

private contextNodeDecl ::= CONTEXT_KEYWORD contextName  (COMMA contextName)*

private contextNodeRel ::= leftContextNode relSymbol rightContextNode SEMICOLON
{
  implements="com.feakin.intellij.psi.FeakinContextNodeRel"
  methods=[getLeftNode getRightNode]
}

private leftContextNode ::= contextNodeName;

private rightContextNode ::= contextNodeName;

relSymbol ::= RARROW
             | LARROW
             | DARROW
             | CONNECTION
             ;

contextDeclaration ::= CONTEXT_KEYWORD contextName LBRACE contextBody RBRACE
{
  mixin="com.feakin.intellij.psi.impl.FeakinNamedElementImpl"
  implements="com.feakin.intellij.psi.FeakinNamedElement"
  methods=[getName getPresentation]
}

aggregateDeclaration ::= AGGREGATION_KEYWORD aggregateName LBRACE aggregateBody RBRACE

entityDeclaration ::= ENTITY_KEYWORD entityName LBRACE entityBody RBRACE

valueObjectDeclaration ::= VALUE_OBJECT_KEYWORD valueObjectName LBRACE valueObjectBody RBRACE

contextBody ::= AGGREGATION_KEYWORD LBRACE name_component (COMMENT name_component)? SEMICOLON

private aggregateBody ::= aggregateEntry*

private aggregateEntry ::=
    IDENTIFIER ':' IDENTIFIER ';'
  | IDENTIFIER ':' IDENTIFIER '[' IDENTIFIER ']';

private entityBody ::= entityEntry*
private entityEntry ::= IDENTIFIER ':' IDENTIFIER ';'

private valueObjectBody ::= valueObjectEntry*
private valueObjectEntry ::= IDENTIFIER ':' IDENTIFIER ';'

contextMapName ::= name_component

contextName ::= name_component

aggregateName ::= name_component

entityName ::= name_component

valueObjectName ::= name_component

contextNodeName ::= name_component

name_component ::= IDENTIFIER
{
  mixin="com.feakin.intellij.psi.impl.FeakinNamedElementImpl"
  implements="com.feakin.intellij.psi.FeakinNamedElement"

  methods=[
    getReference
  ]
}
